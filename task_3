#include <SFML/Graphics.hpp>
#include <time.h>
#include <list>
#include <random>
#include<String>
#include <cmath>
#include <iostream>


using namespace sf;

//width of window
const int W = 1200;
//hight of window
const int H = 800;
const int Res = 50;
//dergees to radians
float DEGTORAD = 0.017453f;

//numbers 
int n_Entities = 500;
int r_r = 5;

//velocities
const int v_max = 15;
const int v_min = 5;

//returns mersenne()
int f_rand() {

    std::random_device rd;
    std::mt19937 mersenne(rd());

   //return mersenne();
    return rand();
}


class Entity
{
public:
    float x, y,
          dx, dy,
          R;


    Entity()
    {   
        x = 2*r_r + f_rand() % (W - 4*r_r);
        y = 2*r_r + f_rand() % (H - 4*r_r);

        dx = (f_rand() %( (v_max - v_min)) - (v_max - v_min)/2) / 1,5;
        dy = (f_rand() %( (v_max - v_min)) - (v_max - v_min)/2) / 1,5;
       
       // dy = f_rand() % 7 - 3;
      
        R = r_r;
    }


    void move() {

        x += dx;
        y += dy;

        if ((x > W - 2*r_r) || (x < 2*r_r))  dx = -dx;  
        if ((y > H - 2*r_r) || (y < 2*r_r))  dy = -dy;

     
    };

   


    virtual void update() { 
        move();    
    };

    void draw(RenderWindow& app)
    {       
        //hitbox
        CircleShape circle(R);
        circle.setFillColor(Color(255, 255, 0, 170));
        circle.setPosition(x, y);
        circle.setOrigin(R, R);
        app.draw(circle);

    }

    virtual ~Entity() {};
};

class Background {

private:
    int m_res;
    std::vector < sf::Color > m_colors;
    std::vector <std::vector<int>> m_numbers;

    int m_width;
    int m_height;
    int m_max;


    int x_num;
    int y_num;

    int i_max;
    int j_max;


public:
  
    Background(const int res_, const int width, const int height) {
        m_res = res_;
        m_width = width;
        m_height = height;
        //m_sprite.setOrigin(-width / 2, -height / 2);
       

         x_num = width / m_res;
         y_num = height / m_res;

        //m_max = 10 * n_Entities/ (x_num*y_num);


        for (auto i = 0; i < x_num; i++) {
            m_numbers.push_back(std::vector <int>(y_num));
        }

        m_colors.assign({
           sf::Color(18, 40, 61), //0
           sf::Color(10, 72, 101),//1 - 1/4m
           sf::Color(148, 117, 159),
           sf::Color(177, 61, 36),//1/4 m - 2/4m
           sf::Color(246, 180, 36),//2/4 m - 3/4 m
           sf::Color(252, 248,231),//3/4 m - m
        });

    }

    void calculate(std::list<Entity*> & entities) {

        for (int i = 0; i < x_num; i++) {
            for (int j = 0; j < y_num; j++) {

                m_numbers[i][j] = 0;
            }
        }
        
        m_max = 0;
       
        std::cout << m_max << '\n';

        for (auto e:entities) {           
           int x_i = e->x / m_res;
           int y_i = e->y / m_res;
           (m_numbers[x_i][y_i])++;
           if (m_numbers[x_i][y_i] > m_max) {
               m_max = m_numbers[x_i][y_i];
               i_max = x_i;
               j_max = y_i;
           };
        }

        std::cout << m_max << "\tx: " << i_max << "\ty: " << j_max  << '\n';

    }



    void draw(RenderWindow& app) {
        for (int i = 0; i < x_num; i++) {
            for (int j = 0; j < y_num ; j++) {

                sf::RectangleShape rectangle(sf::Vector2f(m_res, m_res));
                int nums = m_numbers[i][j];
                int a = int(1.0f * m_numbers[i][j] / m_max * (m_colors.size() - 1));
                rectangle.setFillColor(m_colors[a]);
                rectangle.setPosition(i*m_res, j*m_res);
                
                app.draw(rectangle);
            }
        }
        
    }

    int* max() { return &m_max; }

};




bool isCollide(Entity* a, Entity* b)
{   
    if (a != b) {
        return (b->x - a->x) * (b->x - a->x) +
            (b->y - a->y) * (b->y - a->y) <
            4 * r_r * r_r;
    }
    else return false;
}

void calc_collide(Entity* a, Entity* b) {

   float n_x = a->x - b->x;
   float n_y = a->y - b->y;
   
   float n = n_x * n_x + n_y * n_y;
 

   float a_a = v_min + f_rand() %(v_max - v_min);
   float b_b = v_min + f_rand() %(v_max - v_min);
  

   a->dx = n_x / n * b_b;
   a->dy = n_y / n * b_b;
   b->dx = -n_x / n * a_a;
   b->dy = -n_y / n * a_a;

}

int main()
{   
    srand(time(NULL));
    
    RenderWindow app(VideoMode(W, H), "particles");
    app.setFramerateLimit(60);

    Background background(Res, W, H);


    std::list<Entity*> entities;
    //initial spawn
    for (int i = 0; i < n_Entities; i++)
    {
        Entity* a = new Entity();
        entities.push_back(a);
    }



    /////main loop/////
    while (app.isOpen())
    {
        Event event;
        while (app.pollEvent(event))
        {
            if (event.type == Event::Closed)
                app.close();
                     
        }     

        for (auto a : entities) {
            for (auto b : entities)
            {
                if (isCollide(a, b))
                {              

                    calc_collide(a, b);
                                    
                }

            }

        }
      

        for (auto i = entities.begin();i != entities.end(); i++)
        {
            Entity* e = *i;

            e->update();
           
        }
        
        
        background.calculate(entities);
       

        //////draw//////
       
        background.draw(app);

        for (auto i : entities) i->draw(app);

        app.display();


    }

    return 0;
}
